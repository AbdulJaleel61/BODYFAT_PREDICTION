# Libraries for 
import pickle
import numpy as np
import pandas as pd
from sklearn.ensemble import ExtraTreesRegressor
from sklearn.model_selection import train_test_split,RandomizedSearchCV
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.neural_network import MLPRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error,r2_score
import matplotlib.pyplot as plt
from statsmodels.stats.outliers_influence import variance_inflation_factor
from sklearn.feature_selection import mutual_info_regression
from scipy import stats
import seaborn as sn
import warnings
from scipy.optimize import minimize
from sklearn.preprocessing import StandardScaler
warnings.filterwarnings('ignore')
%matplotlib inline

def wrangle(df):
    # Checking for Info.
    df.info()
    
    # checking for missing values.
    df.isnull().sum()
    df.dropna()
    
     # shift column 'BodyFat' to last_position position 
    last_position = df.pop('BodyFat')  
    df.insert(14, 'BodyFat', last_position) 
   
    # Compute Z-scores for all numeric columns
    z_scores = np.abs(stats.zscore(df.select_dtypes(include=[np.number])))  # Apply Z-score only to numeric columns

    # Identify rows with Z-scores greater than 3 (or less than -3) for any column The threshold of 3 is a convention.
    outliers_z = (z_scores > 3).any(axis=1)  # 'any' returns True if any column in the row is an outlier

    # Remove the outliers (keep only rows where outliers_z is False)
    df_cl = df[~outliers_z]
   
   

    # Optionally, save the cleaned dataset to a new CSV file
    df_cl.to_csv('cleaned_body_fat_data.csv', index=False)
    return df_cl
df_cl = wrangle(pd.read_csv('bodyfat.csv'))

data_cl = pd.read_csv("cleaned_body_fat_data.csv")
	
# Example: Distribution of body fat percentage in the dataframe.
plt.figure(figsize=(8, 5))
sn.histplot(data_cl['BodyFat'], kde=True, color='blue', bins=20)
plt.title('Distribution of Body Fat Percentage')
plt.xlabel('Body Fat Percentage')
plt.ylabel('Frequency')
plt.show()

plt.figure(figsize=(12, 8))
sn.heatmap(data_cl.corr(), annot=True, cmap='coolwarm', fmt=".2f",vmin=-1, vmax=1)
plt.title('Correlation Heatmap')
plt.show()

# Split data
X = data_cl.drop(columns=["BodyFat"])
X

y = data_cl["BodyFat"]
y

def ExtraTreeRegressor():
    
    # instantiate ExtrareeRegressor
    er = ExtraTreesRegressor()

    # Fit the Features and target labels
    er.fit(X, y)

    # get the feature importances into a pandas series
    series = pd.Series(er.feature_importances_, index=X.columns)
    
    return series
ExtraTreeRegressor()

# import mutual info regression.
def Mutual_info_gain():
    mr = mutual_info_regression(X, y) 

    plot_data = pd.Series(mr, index=X.columns)
print(plot_data)

plot_data.plot(kind="barh", color="green")

def VIF():
    temp = data_cl[list(data_cl.columns)]
    info = pd.DataFrame()
    # Get varianve importance score
    info["VIF"] = [variance_inflation_factor(temp.values, i) for i in range(temp.shape[1])] 
    info["Columns"] = temp.columns
    return info

VIF()   

y = data_cl['BodyFat']
X = data_cl[["Density","Abdomen","Hip","Chest"]]
# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Build Model.

y_mean = y_train.mean()
y_mean

y_pred_baseline = [y_mean] * len(y_train)
y_pred_baseline[:5]

mae_baseline = mean_absolute_error(y_train,y_pred_baseline)
print("Mean:", round(y_train.mean(), 2))
print("Baseline MAE:", round(mae_baseline, 2))

# Feature Scaling
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)
print(X_train)
print(X_test)

# Hyperparameter tuning for Decision Tree Regressor
dt_param_grid = {
    'max_depth': [5, 10, 15],
    'min_samples_split': [2, 5, 10],
    'min_samples_leaf': [1, 2],
}
dt_grid_search = RandomizedSearchCV(DecisionTreeRegressor(), dt_param_grid, n_iter=10, cv=5, n_jobs=-1, random_state=42)
dt_grid_search.fit(X_train, y_train)
best_dt = dt_grid_search.best_estimator_


# Hyperparameter tuning for Random Forest Regressor
rf_param_grid = {
    'n_estimators': [100, 200, 500],
    'max_depth': [None, 10, 20],
    'min_samples_split': [2, 4],
    'min_samples_leaf': [1, 2],
}
rf_grid_search = RandomizedSearchCV(RandomForestRegressor(), rf_param_grid, n_iter=10, cv=5, n_jobs=-1, random_state=42)
rf_grid_search.fit(X_train, y_train)
best_rf = rf_grid_search.best_estimator_

# Hyperparameter tuning for MLP Regressor
mlp_param_grid = {
    'hidden_layer_sizes': [(32,), (64,), (128,), (32, 32), (64, 64), (128, 128), (32, 64), (64, 128)],
    'activation': ['relu'],
    'alpha': [0.0001],
    'learning_rate_init': [0.001, 0.01],  # Added learning rates
    'batch_size': [16, 32],  # Added batch size
    'max_iter': [100, 200],  # Added epochs range (adjust as needed)
}
mlp_grid_search = RandomizedSearchCV(MLPRegressor(), mlp_param_grid, cv=5, n_iter=15, n_jobs=-1, random_state=42)
mlp_grid_search.fit(X_train, y_train)
best_mlp = mlp_grid_search.best_estimator_

# COmbined Prediction using Weighted Averaging For Hybrid Model.

# Step 1: Define a function to combine predictions using weighted averaging
def weighted_predictions(weights, dt_preds, rf_preds, mlp_preds):
    return weights[0] * dt_preds + weights[1] * rf_preds + weights[2] * mlp_preds

# Step 2: Define an evaluation function to minimize RMSE for the hybrid model
def evaluate_hybrid_model(weights, dt_preds, rf_preds, mlp_preds, y_test):
    combined_preds = weighted_predictions(weights, dt_preds, rf_preds, mlp_preds)
    rmse = np.sqrt(mean_squared_error(y_test, combined_preds))
    return rmse

# Step 3: Use optimization to find the best weights for the hybrid model
# Initial weights (can start with equal weights)
init_weights = [0.3, 0.3, 0.3]

# Constraints: The sum of the weights must be 1
def weight_constraint(weights):
    return np.sum(weights) - 1

# Optimize the weights using minimize from scipy
result = minimize(evaluate_hybrid_model, init_weights, args=(dt_predictions, rf_predictions, mlp_predictions, y_test),
                  bounds=[(0, 1), (0, 1), (0, 1)], constraints={'type': 'eq', 'fun': weight_constraint}, method='SLSQP')

Optimal_Weights = result.x
print(f"Optimal weights for the hybrid model: {Optimal_Weights}")

# Step 4: Make predictions using the hybrid model with the optimal weights
hybrid_predictions = weighted_predictions(Optimal_Weights, dt_predictions, rf_predictions, mlp_predictions)


X_test

# Evaluate the hybrid model.

mae_dt_ind = mean_absolute_error(y_test, dt_predictions)
rmse_dt_ind = np.sqrt(mean_squared_error(y_test, dt_predictions))
r_squared_dt = r2_score(y_test, dt_predictions)
mse_dt = ((y_test-dt_predictions)**2).mean()


mae_rf_ind = mean_absolute_error(y_test, rf_predictions)
rmse_rf_ind = np.sqrt(mean_squared_error(y_test, rf_predictions))
r_squared_rf = r2_score(y_test, rf_predictions)
mse_rf = ((y_test-rf_predictions)**2).mean()



mae_mlp_ind = mean_absolute_error(y_test, mlp_predictions)
rmse_mlp_ind = np.sqrt(mean_squared_error(y_test, mlp_predictions))
r_squared_mlp = r2_score(y_test, mlp_predictions)
mse_mlp = ((y_test-mlp_predictions)**2).mean()


# Evaluate the hybrid model.
mae_hybrid = mean_absolute_error(y_test, hybrid_predictions)
rmse_hybrid = np.sqrt(mean_squared_error(y_test, hybrid_predictions))
r_squared_hybrid = r2_score(y_test, hybrid_predictions)
mse_hybrid = ((y_test-hybrid_predictions)**2).mean()

# Communicate Results.

print("---------------Decision Tree Model----------------")
print(f'Mean Absolute Error_dt_individual: {round(mae_dt_ind,2)}')
print(f'Root Mean Squared Error: {round(rmse_dt_ind,2)}')
print(f'R Squared value: {round(r_squared_dt,2)}')
print(f'mean squared error:{round(mse_dt,2)}')
print(f'Standard Deviation of Decision Tree: {round(np.std(dt_predictions),2)}')
print("\n")


print("---------------Random Forest Model----------------")
print(f'Mean Absolute Error_rf_individual: {round(mae_rf_ind,2)}')
print(f'Root Mean Squared Error: {round(rmse_rf_ind,2)}')
print(f'R Squared value: {round(r_squared_rf,2)}')
print(f'mean squared error:{round(mse_rf,2)}')
print(f'Standard Deviation for Random Forest: {round(np.std(rf_predictions),2)}')
print("\n")


print("---------------MLP Model----------------")
print(f'Mean Absolute Error_mlp_individual: {round(mae_mlp_ind,2)}')
print(f'Root Mean Squared Error: {round(rmse_mlp_ind,2)}')
print(f'R Squared value: {round(r_squared_mlp,2)}')
print(f'mean squared error:{round(mse_mlp,2)}')
print(f'Standard Deviation for MLP: {round(np.std(mlp_predictions),2)}')
print("\n")

print("---------------Hybrid Model----------------")
print(f'Mean Absolute Error: {round(mae_hybrid,2)}')
print(f'Root Mean Squared Error: {round(rmse_hybrid,2)}')
print(f'R Squared value: {round(r_squared_hybrid,2)}')
print(f'Standard Deviation for Hybrid: {round(np.std(hybrid_predictions),2)}')
print(f'mean squared error:{round(mse_hybrid,2)}')

# Save the hybrid model using pickle
hybrid_model = {
    'decision_tree': best_dt,
    'random_forest': best_rf,
    'mlp': best_mlp
}
with open('hybrid_model.pkl', 'wb') as file:
    pickle.dump(hybrid_model, file)

print("Hybrid model saved as hybrid_model.pkl")

# Abdomen Circumference vs BodyFat.
plt.figure(figsize=(8, 6))
sn.regplot(x=data_cl["Abdomen"], y=data_cl["BodyFat"], data=data_cl, scatter_kws={"color": "blue"}, line_kws={"color": "red"})
plt.title("Abdomen Circumference VS Body Fat")
plt.xlabel("Abdomen Circumference(cm)")
plt.ylabel("Body Fat Percentage")
plt.grid(False)
plt.show()

# Density Determined by underwater weighing vs BodyFat
plt.figure(figsize=(8, 6))
sn.regplot(x=data_cl["Density"], y=data_cl["BodyFat"], data=data_cl, scatter_kws={"color": "green"}, line_kws={"color": "red"})
plt.title("Density Determined by underwater weighing VS Body Fat")
plt.xlabel("Density Determined by underwater weighing (Values from Siri's equation)")
plt.ylabel("Body Fat Percentage")
plt.grid(False)
plt.show()

# Hip VS BodyFat
plt.figure(figsize=(8, 6))
sn.regplot(x=data_cl["Hip"], y=data_cl["BodyFat"], data=data_cl, scatter_kws={"color": "green"}, line_kws={"color": "red"})
plt.title("Hip Circumference VS Body Fat")
plt.xlabel("Hip Circumference")
plt.ylabel("Body Fat Percentage")
plt.grid(False)
plt.show()

# Chest Circumference VS Body Fat.
plt.figure(figsize=(8, 6))
sn.regplot(x=data_cl["Chest"], y=data_cl["BodyFat"], data=data_cl, scatter_kws={"color": "green"}, line_kws={"color": "red"})
plt.title("Chest Circumference VS Body Fat")
plt.xlabel("Chest Circumference")
plt.ylabel("Body Fat Percentage")
plt.grid(False)
plt.show()


<!-- Simple Web App Index.html-->

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="{{ url_for('static', filename='style2.css') }}">
    <title>Prediction Result</title>
</head>
<body>
<!-- Navbar -->
<nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <a class="navbar-brand" href="#">Body Fat Estimator</a>
    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="navbarNav">
        <ul class="navbar-nav ml-auto">
            <li class="nav-item">
                <a class="nav-link" href="{{ url_for('index') }}">Home</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="{{ url_for('About') }}">About Us</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="{{url_for('Contact') }}">Contact Us</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="{{url_for('result') }}">Results</a>
            </li>
        </ul>
    </div>
</nav>


    <h2>Body Fat Prediction Result</h2>
    <p>Your predicted body fat percentage is: <strong>{{body_fat_prediction|abs|round(2)}}</strong>%</p>
    <h3> women > 30% are obese</h3>
    <h3> men > 25% are obese</h3>
    <br>
    <h3><b>Health Suggestion for Obese People</h3></b>
    <br>
    <h3>
    Eat a balanced calorie-controlled diet as recommended by a GP or weight loss management health professional (such as a dietitian) </h3>
    <br>
    <h3>Take up activities such as fast walking, jogging, swimming or tennis for 150 to 300 minutes (2.5 to 5 hours) a week </h3>
    
    <a href="{{url_for('index') }}">Go back</a>
    <!-- Include Bootstrap JS and dependencies -->
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>


<!-- result.html-->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="{{ url_for('static', filename='style2.css') }}">
    <title>Prediction Result</title>
</head>
<body>
<!-- Navbar -->
<nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <a class="navbar-brand" href="#">Body Fat Estimator</a>
    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="navbarNav">
        <ul class="navbar-nav ml-auto">
            <li class="nav-item">
                <a class="nav-link" href="{{ url_for('index') }}">Home</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="{{ url_for('About') }}">About Us</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="{{url_for('Contact') }}">Contact Us</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="{{url_for('result') }}">Results</a>
            </li>
        </ul>
    </div>
</nav>


    <h2>Body Fat Prediction Result</h2>
    <p>Your predicted body fat percentage is: <strong>{{body_fat_prediction|abs|round(2)}}</strong>%</p>
    <h3> women > 30% are obese</h3>
    <h3> men > 25% are obese</h3>
    <br>
    <h3><b>Health Suggestion for Obese People</h3></b>
    <br>
    <h3>
    Eat a balanced calorie-controlled diet as recommended by a GP or weight loss management health professional (such as a dietitian) </h3>
    <br>
    <h3>Take up activities such as fast walking, jogging, swimming or tennis for 150 to 300 minutes (2.5 to 5 hours) a week </h3>
    
    <a href="{{url_for('index') }}">Go back</a>
    <!-- Include Bootstrap JS and dependencies -->
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>


# APP.py file

from flask import Flask, request, jsonify, render_template
import numpy as np
import pickle

# Load the saved hybrid model
with open('hybrid_model.pkl', 'rb') as file:
    hybrid_model = pickle.load(file)

# Extract individual models from the hybrid model
decision_tree = hybrid_model['decision_tree']
random_forest = hybrid_model['random_forest']
mlp = hybrid_model['mlp']

# Initialize Flask app
app = Flask(__name__)

# Home route to render input form
@app.route('/')
def index():
    return render_template('index.html')

# Prediction route to handle form data and render result
@app.route('/predict', methods=['POST'])
def predict():
    # Get form data
    chest = float(request.form['Chest'])
    hip = float(request.form['Hip'])
    abdomen = float(request.form['Abdomen'])
    density = float(request.form['Density'])
    
    # Prepare data for prediction
    input_features = np.array([[chest, hip, abdomen, density]])
    
    # Make predictions with individual models
    dt_prediction = decision_tree.predict(input_features)
    rf_prediction = random_forest.predict(input_features)
    mlp_prediction = mlp.predict(input_features)

    # Combine predictions (simple averaging)
    hybrid_prediction = (dt_prediction + rf_prediction + mlp_prediction) / 3

    # Render result.html with prediction
    return render_template('result.html', body_fat_prediction =float(hybrid_prediction[0]))


/* General styling Style1css*/
body { 
    font-family: Arial, sans-serif; 
    margin: 0; 
    padding: 0; 
    background-color: #f4f4f4; 
}

/* Navbar Styling */
.navbar {
    background-color: #4CAF50;
}

.navbar .logo {
    font-size: 24px;
    font-weight: bold;
    color: white;
}

/* Navbar Links */
.navbar .nav-links a {
    color: white;
    text-decoration: none;
    padding: 10px 15px;
    border-radius: 5px;
    font-weight: bold;
}

.navbar .nav-links a:hover {
    background-color: #3e8e41;
}

/* Toggle button styling for small screens */
.navbar-toggle {
    background-color: #4CAF50;
    color: white;
    font-size: 30px;
    border: none;
    cursor: pointer;
    display: none;
    padding: 5px;
}

.navbar-toggle:focus {
    outline: none;
}

/* Main Form Container */
.container {
    max-width: 600px;
    margin: 50px auto;
    background-color: #fff;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

/* Form Element Styling */
h2 {
    text-align: center;
    margin-bottom: 20px;
}

label {
    font-weight: bold;
    margin-top: 10px;
}

.form-control {
    margin-bottom: 15px;
}

button[type="submit"] {
    width: 100%;
    background-color: #343a40;
    font-weight: bold;
}

/* Responsive styling for navbar on small screens */
@media (max-width: 768px) {
    .navbar .nav-links {
        display: none;
        width: 100%;
        text-align: center;
        margin-top: 10px;
    }

    .navbar-toggle {
        display: block;
        margin-left: auto;
    }

    .navbar .nav-links.active {
        display: block;
    }
}


# Home route to render result form
@app.route('/result')
def result():
    return render_template('result.html')

@app.route('/home')
def home():
    return render_template('index.html')


@app.route('/About Us')
def About():
    return render_template('About_Us.html')

@app.route('/Contact')
def Contact():
    return render_template('Contact_Us.html')

if __name__ == '__main__':
    app.run(debug=True)


